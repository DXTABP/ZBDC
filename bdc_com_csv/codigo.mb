TYPE-POOLS: TRUXS.

* Constantes para valores fixos
CONSTANTS: GC_ORDER_TYPE   TYPE AUART VALUE 'OP',       " Tipo de pedido
           GC_SALES_GROUP  TYPE VKGRP VALUE '001',      " Grupo de vendedores
           GC_SALES_OFFICE TYPE VKBUR VALUE '0001',     " Escritório de vendas
           GC_PRICE_GROUP  TYPE KPRGBZ VALUE 'D',       " Grupo de preços
           GC_INCOTERMS    TYPE INCO1 VALUE 'EXW'.      " Incoterms
"gc_delivery_loc   TYPE inco2_l VALUE 'xxxxx'. " Local de entrega
"gc_payment_terms  TYPE zterm VALUE '0004',     " Condição de pagamento

* Estrutura para armazenar dados do CSV
TYPES: BEGIN OF TY_DADOS_CSV,
         KUNNR TYPE KUNNR,           " Cliente
         DATUM TYPE DATUM,           " Data do pedido
         MATNR TYPE MATNR,           " Material
         MENGE TYPE STRING,          " Quantidade
         KBETR TYPE STRING,          " Valor unitário
         VKORG TYPE VKORG,           " Organização de vendas
         VTWEG TYPE VTWEG,           " Canal de distribuição
         SPART TYPE SPART,           " Setor de atividade
       END OF TY_DADOS_CSV.

* Estrutura para o log de processamento
TYPES: BEGIN OF TY_LOG,
         CLIENTE    TYPE KUNNR,    " Cliente
         MATERIAL   TYPE MATNR,    " Material
         STATUS     TYPE CHAR1,    " Status (S = Sucesso, E = Erro)
         MENSAGEM   TYPE STRING,   " Mensagem de retorno
         SALESORDER TYPE VBELN,    " Número da ordem de venda
       END OF TY_LOG.

* Tabelas e estruturas para BDC
DATA: LT_BDCDATA  TYPE TABLE OF BDCDATA,
      LS_BDCDATA  TYPE BDCDATA,
      LT_MESSAGES TYPE TABLE OF BDCMSGCOLL,
      LS_OPTIONS  TYPE CTU_PARAMS.

* Tabelas e estruturas para dados do CSV e log
DATA: LT_DATA     TYPE TABLE OF STRING,
      LT_LOG      TYPE TABLE OF TY_LOG,
      LS_LOG      TYPE TY_LOG,
      LS_CSV      TYPE TY_DADOS_CSV,
      LV_FILENAME TYPE STRING.

* Tela de seleção
SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-001.
PARAMETERS: P_FILE TYPE RLGRAP-FILENAME OBLIGATORY.
SELECTION-SCREEN COMMENT /1(79) TEXT-002.
SELECTION-SCREEN END OF BLOCK B2.

* Inicialização da tela de seleção
INITIALIZATION.
  "TEXT-001 = 'Seleção de Arquivo'.
  " TEXT-002 = 'Selecione um arquivo CSV:'.

* Validação do arquivo selecionado
AT SELECTION-SCREEN ON P_FILE.
  IF P_FILE IS NOT INITIAL AND P_FILE NP '*.CSV'.
    MESSAGE 'O arquivo deve ter extensão .CSV' TYPE 'E'.
  ENDIF.

* Abertura da janela de seleção de arquivo
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
  CALL FUNCTION 'WS_FILENAME_GET'
    EXPORTING
      DEF_FILENAME     = P_FILE
      MODE             = 'O'
      TITLE            = 'Selecione o arquivo que deseja abrir'
    IMPORTING
      FILENAME         = P_FILE
    EXCEPTIONS
      INV_WINSYS       = 1
      NO_BATCH         = 2
      SELECTION_CANCEL = 3
      SELECTION_ERROR  = 4
      OTHERS           = 5.

  IF SY-SUBRC <> 0.
    MESSAGE 'Erro ao selecionar o arquivo' TYPE 'E'.
  ENDIF.

* Início do processamento
START-OF-SELECTION.
  PERFORM F_LOAD_FILE.          " Carrega o arquivo CSV
  PERFORM F_PROCESS_DATA.       " Processa os dados do CSV
  PERFORM F_DISPLAY_LOG.        " Exibe o log de processamento

*&---------------------------------------------------------------------*
*& Form f_load_file
*&---------------------------------------------------------------------*
* Carrega o arquivo CSV para a tabela interna lt_data.
*----------------------------------------------------------------------*
FORM F_LOAD_FILE.
  LV_FILENAME = P_FILE.

  " Upload do arquivo CSV
  CALL FUNCTION 'GUI_UPLOAD'
    EXPORTING
      FILENAME = LV_FILENAME
      FILETYPE = 'ASC'
    TABLES
      DATA_TAB = LT_DATA
    EXCEPTIONS
      OTHERS   = 19.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
      WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form f_process_data
*&---------------------------------------------------------------------*
* Processa cada linha do arquivo CSV e cria ordens de venda.
*----------------------------------------------------------------------*
FORM F_PROCESS_DATA.
  IF LT_DATA IS INITIAL.
    MESSAGE 'Nenhum dado encontrado no arquivo' TYPE 'E'.
    RETURN.
  ENDIF.

  LOOP AT LT_DATA INTO DATA(LV_CSV).
    IF SY-TABIX <> 1.  " Ignorar cabeçalho
      CLEAR: LS_CSV, LS_LOG.
      PERFORM F_SPLIT_CSV USING LV_CSV CHANGING LS_CSV.  " Separa os campos do CSV
      PERFORM F_FORMAT_FIELDS CHANGING LS_CSV.           " Formata campos com zeros à esquerda
      PERFORM F_VALIDATE_DATA USING LS_CSV.              " Valida os dados
      IF LS_LOG-STATUS IS INITIAL.
        PERFORM F_PREPARE_BDC USING LS_CSV.              " Prepara os dados para o BDC
        PERFORM F_EXECUTE_BDC.                          " Executa a transação VA01
        PERFORM F_RECORD_LOG USING LS_CSV.               " Registra o log
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form f_split_csv
*&---------------------------------------------------------------------*
* Separa os campos de uma linha do CSV e armazena na estrutura ls_csv.
*----------------------------------------------------------------------*
FORM F_SPLIT_CSV USING P_CSV TYPE STRING CHANGING CS_CSV TYPE TY_DADOS_CSV.
  SPLIT P_CSV AT ';' INTO CS_CSV-KUNNR CS_CSV-DATUM CS_CSV-MATNR CS_CSV-MENGE CS_CSV-KBETR CS_CSV-VKORG CS_CSV-VTWEG CS_CSV-SPART.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form f_format_fields
*&---------------------------------------------------------------------*
* Formata campos com zeros à esquerda.
*----------------------------------------------------------------------*
FORM F_FORMAT_FIELDS CHANGING CS_CSV TYPE TY_DADOS_CSV.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = CS_CSV-KUNNR
    IMPORTING
      OUTPUT = CS_CSV-KUNNR.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = CS_CSV-VKORG
    IMPORTING
      OUTPUT = CS_CSV-VKORG.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = CS_CSV-VTWEG
    IMPORTING
      OUTPUT = CS_CSV-VTWEG.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      INPUT  = CS_CSV-SPART
    IMPORTING
      OUTPUT = CS_CSV-SPART.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form f_validate_data
*&---------------------------------------------------------------------*
* Valida os dados do CSV antes de processar a ordem de venda.
*----------------------------------------------------------------------*
FORM F_VALIDATE_DATA USING IS_CSV TYPE TY_DADOS_CSV.
  " Valida cliente
  SELECT SINGLE KUNNR INTO @DATA(LV_KUNNR)
  FROM KNA1
  WHERE KUNNR = @IS_CSV-KUNNR.
  IF SY-SUBRC <> 0.
    LS_LOG-STATUS = 'E'.
    LS_LOG-MENSAGEM = 'Cliente não existe'.
    APPEND LS_LOG TO LT_LOG.
    RETURN.
  ENDIF.

  " Valida material
  SELECT SINGLE MATNR INTO @DATA(LV_MATNR)
  FROM MARA
  WHERE MATNR = @IS_CSV-MATNR.
  IF SY-SUBRC <> 0.
    LS_LOG-STATUS = 'E'.
    LS_LOG-MENSAGEM = 'Material não existe'.
    APPEND LS_LOG TO LT_LOG.
    RETURN.
  ENDIF.

  " Valida quantidade e valor unitário
  IF IS_CSV-MENGE <= 0 OR IS_CSV-KBETR <= 0.
    LS_LOG-STATUS = 'E'.
    LS_LOG-MENSAGEM = 'Quantidade ou valor unitário inválido'.
    APPEND LS_LOG TO LT_LOG.
    RETURN.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form f_prepare_bdc
*&---------------------------------------------------------------------*
* Prepara os dados para o BDC com base nos dados do CSV.
*----------------------------------------------------------------------*
FORM F_PREPARE_BDC USING IS_CSV TYPE TY_DADOS_CSV.
  PERFORM F_BDC_DYNPRO USING 'SAPMV45A' '0101'.
  PERFORM F_BDC_FIELDS USING 'BDC_OKCODE' '=ENT2'.
  PERFORM F_BDC_FIELDS USING 'VBAK-AUART' GC_ORDER_TYPE.
  PERFORM F_BDC_FIELDS USING 'VBAK-VKORG' IS_CSV-VKORG.
  PERFORM F_BDC_FIELDS USING 'VBAK-VTWEG' IS_CSV-VTWEG.
  PERFORM F_BDC_FIELDS USING 'VBAK-SPART' IS_CSV-SPART.
  PERFORM F_BDC_FIELDS USING 'VBAK-VKGRP' GC_SALES_GROUP.
  PERFORM F_BDC_FIELDS USING 'VBAK-VKBUR' GC_SALES_OFFICE.
  PERFORM F_BDC_DYNPRO USING 'SAPMV45A' '4001'.
  PERFORM F_BDC_FIELDS USING 'BDC_OKCODE' '/00'.
  PERFORM F_BDC_FIELDS USING 'KUAGV-KUNNR' IS_CSV-KUNNR.
  PERFORM F_BDC_FIELDS USING 'VBKD-BSTKD' IS_CSV-KUNNR.
  PERFORM F_BDC_FIELDS USING 'RV45A-KPRGBZ' GC_PRICE_GROUP.
  PERFORM F_BDC_FIELDS USING 'RV45A-MABNR(01)' IS_CSV-MATNR.
  PERFORM F_BDC_FIELDS USING 'RV45A-KWMENG(01)' IS_CSV-MENGE.
  PERFORM F_BDC_FIELDS USING 'KOMV-KBETR(01)' IS_CSV-KBETR.
  "PERFORM f_bdc_fields USING 'VBKD-ZTERM' gc_payment_terms.
  "PERFORM f_bdc_fields USING 'VBKD-INCO2_L' gc_delivery_loc.
  PERFORM F_BDC_FIELDS USING 'VBKD-INCO1' GC_INCOTERMS.
  PERFORM F_BDC_DYNPRO USING 'SAPMV45A' '4001'.
  PERFORM F_BDC_FIELDS USING 'BDC_OKCODE' '=SICH'.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form f_execute_bdc
*&---------------------------------------------------------------------*
* Executa a transação VA01 usando os dados preparados.
*----------------------------------------------------------------------*
FORM F_EXECUTE_BDC.
  LS_OPTIONS-DISMODE = 'N'.
  LS_OPTIONS-UPDMODE = 'S'.

  CALL TRANSACTION 'VA01' USING LT_BDCDATA
    OPTIONS FROM LS_OPTIONS
    MESSAGES INTO LT_MESSAGES.

  IF SY-SUBRC = 0.
    LS_LOG-STATUS = 'S'.
    LS_LOG-MENSAGEM = 'Ordem de venda criada com sucesso'.
  ELSE.
    LS_LOG-STATUS = 'E'.
    LS_LOG-MENSAGEM = 'Erro ao criar ordem de venda'.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form f_record_log
*&---------------------------------------------------------------------*
* Registra o resultado do processamento no log.
*----------------------------------------------------------------------*
FORM F_RECORD_LOG USING IS_CSV TYPE TY_DADOS_CSV.
  LS_LOG-CLIENTE = IS_CSV-KUNNR.
  LS_LOG-MATERIAL = IS_CSV-MATNR.
  "LS_LOG-SALESORDER = LV_SALESORDER.
  APPEND LS_LOG TO LT_LOG.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form f_display_log
*&---------------------------------------------------------------------*
* Exibe o log de processamento em ALV.
*----------------------------------------------------------------------*
FORM F_DISPLAY_LOG.
  TRY.
      CL_SALV_TABLE=>FACTORY(
        IMPORTING
          R_SALV_TABLE = DATA(LO_ALV)
        CHANGING
          T_TABLE      = LT_LOG ).

      LO_ALV->DISPLAY( ).
    CATCH CX_SALV_MSG INTO DATA(LO_EXCEPTION).
      MESSAGE LO_EXCEPTION->GET_TEXT( ) TYPE 'E'.
  ENDTRY.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form f_bdc_dynpro
*&---------------------------------------------------------------------*
* Preenche a estrutura do BDC com os dados da tela.
*----------------------------------------------------------------------*
FORM F_BDC_DYNPRO USING VALUE(P_PROGRAM) VALUE(P_DYNPRO).
  CLEAR LS_BDCDATA.
  LS_BDCDATA-PROGRAM = P_PROGRAM.
  LS_BDCDATA-DYNPRO = P_DYNPRO.
  LS_BDCDATA-DYNBEGIN = 'X'.
  APPEND LS_BDCDATA TO LT_BDCDATA.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form f_bdc_fields
*&---------------------------------------------------------------------*
* Preenche a estrutura do BDC com os campos e valores.
*----------------------------------------------------------------------*
FORM F_BDC_FIELDS USING VALUE(P_FNAM) VALUE(P_FVAL).
  CLEAR LS_BDCDATA.
  LS_BDCDATA-FNAM = P_FNAM.
  LS_BDCDATA-FVAL = P_FVAL.
  APPEND LS_BDCDATA TO LT_BDCDATA.
ENDFORM.
